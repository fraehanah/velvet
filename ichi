-- First Assignment
-- Reimplement Haskell function
-- DON'T USE GOOGLE
module Template where

import Data.List

-- 1.a

null' x
  | x == [] = True
  | otherwise = False

--pembatas

take' 0 (xs) = []
take' n (x:xs) = x : take' (n-1) (xs)

--pembatas

drop' 0 (xs) = (xs)
drop' n (x:xs) = drop' (n-1) (xs) 

--pembatas

fst' (a,b) = a

--pembatas

snd' (c,d) = d

--pembatas

map' x = x

--pembatas

filter' x = x

--pembatas

delete' x = x

--pembatas

deleteAll' x = x

--pembatas

foldl' x = x

--pembatas

foldl1' x = x

--pembatas

zip' x = x

--pembatas

zipWith' x = x

--pembatas

nth' x = x

--pembatas

scanl' x = x

--pembatas

scanl1' x = x

--pembatas

elem' x = x

--pembatas

notElem' x = x

--pembatas

head' (x:xs) = x 

--pembatas

length' [] = 0
length' (x:xs) = 1 + (length' (xs))

--pembatas

reverse' [] = []
reverse' (x:xs) = reverse'(xs) ++ x : []

--pembatas

last' [] = 0
last' [x] = x
last' (x:xs) = last' xs

--pembatas

tail' (x:xs) = xs

--pembatas

init' [x] = []
init' (x:xs) = [x] ++ init' (xs)

--pembatas

max' a b 
  | a>b = a
  | otherwise = b

--pembatas

min' a b
  | a<b = a
  | otherwise = b

--pembatas

concat' [(x:xs)] = (x:xs)

--pembatas

intersperse' x = x

--pembatas

intercalate' x = x

--pembatas

and' x
  | x == True = True
  | otherwise = False


--pembatas

or' x = x

--pembatas

zip3' x = x

--pembatas

sum' x = x

--pembatas

product' [] = 1
product' (x:xs) = x * product' xs

--pembatas

words' c = c : []

--pembatas

lines' d = d : []

--pembatas

unlines' [a] = a ++ []

--pembatas

unwords' [f] = f ++ []

--pembatas

takeWhile' x = x

--pembatas

dropWhile' x = x

--pembatas

concatMap' x = x

--pembatas

all' x = x

--pembatas

any' x = x

--pembatas

insert' x = x

--pembatas

zipWith3' x = x

--pembatas

-- 1.b

nub' x = x

--pembatas

sort' x = x

--pembatas

minimum' x = x

--pembatas

maximum' x = x

--pembatas

inits' x = x

--pembatas

tails' x = x

--pembatas

union' x = x

--pembatas

intersect' x = x

--pembatas

group' x = x

--pembatas

splitAt' x = x

--pembatas

partition' x = x

--pembatas

replicate' x = x

--pembatas
-- First Assignment
-- Reimplement Haskell function
-- DON'T USE GOOGLE
